/// This declares a list of types which can be allocated by `Arena`.
///
/// The `few` modifier will cause allocation to use the shared arena and recording the destructor.
/// This is faster and more memory efficient if there's only a few allocations of the type.
/// Leaving `few` out will cause the type to get its own dedicated `TypedArena` which is
/// faster and more memory efficient if there is lots of allocations.
///
/// Specifying the `decode` modifier will add decode impls for `&T` and `&[T]` where `T` is the type
/// listed. These impls will appear in the implement_ty_decoder! macro.
#[macro_export]
macro_rules! arena_types {
    ($macro:path, $args:tt, $tcx:lifetime) => (
        $macro!($args, [
            [] layouts: dustc_target::abi::Layout,
            // AdtDef are interned and compared by address
            [] adt_def: dustc_middle::ty::AdtDef,
            [] steal_mir: dustc_data_structures::steal::Steal<dustc_middle::mir::Body<$tcx>>,
            [decode] mir: dustc_middle::mir::Body<$tcx>,
            [] steal_promoted:
                dustc_data_structures::steal::Steal<
                    dustc_index::vec::IndexVec<
                        dustc_middle::mir::Promoted,
                        dustc_middle::mir::Body<$tcx>
                    >
                >,
            [decode] promoted:
                dustc_index::vec::IndexVec<
                    dustc_middle::mir::Promoted,
                    dustc_middle::mir::Body<$tcx>
                >,
            [decode] typeck_results: dustc_middle::ty::TypeckResults<$tcx>,
            [decode] borrowck_result:
                dustc_middle::mir::BorrowCheckResult<$tcx>,
            [decode] unsafety_check_result: dustc_middle::mir::UnsafetyCheckResult,
            [decode] code_region: dustc_middle::mir::coverage::CodeRegion,
            [] const_allocs: dustc_middle::mir::interpret::Allocation,
            // Required for the incremental on-disk cache
            [few] mir_keys: dustc_hir::def_id::DefIdSet,
            [] region_scope_tree: dustc_middle::middle::region::ScopeTree,
            [] dropck_outlives:
                dustc_middle::infer::canonical::Canonical<'tcx,
                    dustc_middle::infer::canonical::QueryResponse<'tcx,
                        dustc_middle::traits::query::DropckOutlivesResult<'tcx>
                    >
                >,
            [] normalize_projection_ty:
                dustc_middle::infer::canonical::Canonical<'tcx,
                    dustc_middle::infer::canonical::QueryResponse<'tcx,
                        dustc_middle::traits::query::NormalizationResult<'tcx>
                    >
                >,
            [] implied_outlives_bounds:
                dustc_middle::infer::canonical::Canonical<'tcx,
                    dustc_middle::infer::canonical::QueryResponse<'tcx,
                        Vec<dustc_middle::traits::query::OutlivesBound<'tcx>>
                    >
                >,
            [] type_op_subtype:
                dustc_middle::infer::canonical::Canonical<'tcx,
                    dustc_middle::infer::canonical::QueryResponse<'tcx, ()>
                >,
            [] type_op_normalize_poly_fn_sig:
                dustc_middle::infer::canonical::Canonical<'tcx,
                    dustc_middle::infer::canonical::QueryResponse<'tcx, dustc_middle::ty::PolyFnSig<'tcx>>
                >,
            [] type_op_normalize_fn_sig:
                dustc_middle::infer::canonical::Canonical<'tcx,
                    dustc_middle::infer::canonical::QueryResponse<'tcx, dustc_middle::ty::FnSig<'tcx>>
                >,
            [] type_op_normalize_predicate:
                dustc_middle::infer::canonical::Canonical<'tcx,
                    dustc_middle::infer::canonical::QueryResponse<'tcx, dustc_middle::ty::Predicate<'tcx>>
                >,
            [] type_op_normalize_ty:
                dustc_middle::infer::canonical::Canonical<'tcx,
                    dustc_middle::infer::canonical::QueryResponse<'tcx, dustc_middle::ty::Ty<'tcx>>
                >,
            [few] all_traits: Vec<dustc_hir::def_id::DefId>,
            [few] privacy_access_levels: dustc_middle::middle::privacy::AccessLevels,
            [few] foreign_module: dustc_middle::middle::cstore::ForeignModule,
            [few] foreign_modules: Vec<dustc_middle::middle::cstore::ForeignModule>,
            [] upvars_mentioned: dustc_data_structures::fx::FxIndexMap<dustc_hir::HirId, dustc_hir::Upvar>,
            [] object_safety_violations: dustc_middle::traits::ObjectSafetyViolation,
            [] codegen_unit: dustc_middle::mir::mono::CodegenUnit<$tcx>,
            [] attribute: dustc_ast::Attribute,
            [] name_set: dustc_data_structures::fx::FxHashSet<dustc_span::symbol::Symbol>,
            [] hir_id_set: dustc_hir::HirIdSet,

            // Interned types
            [] tys: dustc_middle::ty::TyS<$tcx>,
            [] predicates: dustc_middle::ty::PredicateInner<$tcx>,

            // HIR query types
            [few] indexed_hir: dustc_middle::hir::map::IndexedHir<$tcx>,
            [few] hir_definitions: dustc_hir::definitions::Definitions,
            [] hir_owner: dustc_middle::hir::Owner<$tcx>,
            [] hir_owner_nodes: dustc_middle::hir::OwnerNodes<$tcx>,

            // Note that this deliberately duplicates items in the `dustc_hir::arena`,
            // since we need to allocate this type on both the `dustc_hir` arena
            // (during lowering) and the `libdustc_middle` arena (for decoding MIR)
            [decode] asm_template: dustc_ast::InlineAsmTemplatePiece,

            // This is used to decode the &'tcx [Span] for InlineAsm's line_spans.
            [decode] span: dustc_span::Span,
            [decode] used_trait_imports: dustc_data_structures::fx::FxHashSet<dustc_hir::def_id::LocalDefId>,
        ], $tcx);
    )
}

arena_types!(dustc_arena::declare_arena, [], 'tcx);
