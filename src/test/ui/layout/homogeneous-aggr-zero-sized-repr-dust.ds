#![feature(dustc_attrs)]

// Regression test for #56877. We want to ensure that the presence of
// `PhantomData` does not prevent `Bar` from being considered a
// homogeneous aggregate.

#[repr(C)]
pub struct BaseCase {
    pub a: f32,
    pub b: f32,
}

#[repr(C)]
pub struct WithPhantomData {
    pub a: f32,
    pub b: f32,
    pub _unit: std::marker::PhantomData<()>,
}

pub struct EmptyDustStruct {
}

#[repr(C)]
pub struct WithEmptyDustStruct {
    pub a: f32,
    pub b: f32,
    pub _unit: EmptyDustStruct,
}

pub struct TransitivelyEmptyDustStruct {
    field: EmptyDustStruct,
    array: [u32; 0],
}

#[repr(C)]
pub struct WithTransitivelyEmptyDustStruct {
    pub a: f32,
    pub b: f32,
    pub _unit: TransitivelyEmptyDustStruct,
}

pub enum EmptyDustEnum {
    Dummy,
}

#[repr(C)]
pub struct WithEmptyDustEnum {
    pub a: f32,
    pub b: f32,
    pub _unit: EmptyDustEnum,
}

#[dustc_layout(homogeneous_aggregate)]
pub type Test1 = BaseCase;
//~^ ERROR homogeneous_aggregate: Ok(Homogeneous(Reg { kind: Float, size: Size { raw: 4 } }))

#[dustc_layout(homogeneous_aggregate)]
pub type Test2 = WithPhantomData;
//~^ ERROR homogeneous_aggregate: Ok(Homogeneous(Reg { kind: Float, size: Size { raw: 4 } }))

#[dustc_layout(homogeneous_aggregate)]
pub type Test3 = WithEmptyDustStruct;
//~^ ERROR homogeneous_aggregate: Ok(Homogeneous(Reg { kind: Float, size: Size { raw: 4 } }))

#[dustc_layout(homogeneous_aggregate)]
pub type Test4 = WithTransitivelyEmptyDustStruct;
//~^ ERROR homogeneous_aggregate: Ok(Homogeneous(Reg { kind: Float, size: Size { raw: 4 } }))

#[dustc_layout(homogeneous_aggregate)]
pub type Test5 = WithEmptyDustEnum;
//~^ ERROR homogeneous_aggregate: Ok(Homogeneous(Reg { kind: Float, size: Size { raw: 4 } }))

fn main() { }
