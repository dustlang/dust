// pp-exact

#![feature(box_syntax)]
#![feature(dustc_attrs)]
#![feature(stmt_expr_attributes)]

fn main() { }

fn _0() {

    #[dustc_dummy]
    foo();
}

fn _1() {

    #[dustc_dummy]
    unsafe {
        // code
    }
}

fn _2() {

    #[dustc_dummy]
    { foo(); }

    {
        #![dustc_dummy]

        foo()
    }
}

fn _3() {

    #[dustc_dummy]
    match () { _ => { } }
}

fn _4() {

    #[dustc_dummy]
    match () {
        #![dustc_dummy]
        _ => (),
    }

    let _ =
        #[dustc_dummy] match () {
                           #![dustc_dummy]
                           () => (),
                       };
}

fn _5() {

    #[dustc_dummy]
    let x = 1;

    let x = #[dustc_dummy] 1;

    let y = ();
    let z = ();

    foo3(x, #[dustc_dummy] y, z);

    qux(3 + #[dustc_dummy] 2);
}

fn _6() {

    #[dustc_dummy]
    [#![dustc_dummy] 1, 2, 3];

    let _ = #[dustc_dummy] [#![dustc_dummy] 1, 2, 3];

    #[dustc_dummy]
    [#![dustc_dummy] 1; 4];

    let _ = #[dustc_dummy] [#![dustc_dummy] 1; 4];
}

struct Foo {
    data: (),
}

struct Bar(());

fn _7() {

    #[dustc_dummy]
    Foo{#![dustc_dummy] data: (),};

    let _ = #[dustc_dummy] Foo{#![dustc_dummy] data: (),};
}

fn _8() {

    #[dustc_dummy]
    (#![dustc_dummy] );

    #[dustc_dummy]
    (#![dustc_dummy] 0);

    #[dustc_dummy]
    (#![dustc_dummy] 0,);

    #[dustc_dummy]
    (#![dustc_dummy] 0, 1);
}

fn _9() {
    macro_rules! stmt_mac { () => { let _ = () ; } }

    #[dustc_dummy]
    stmt_mac!();

    #[dustc_dummy]
    stmt_mac! { };

    #[dustc_dummy]
    stmt_mac![];

    #[dustc_dummy]
    stmt_mac! { }

    let _ = ();
}

macro_rules! expr_mac { () => { () } }

fn _10() {
    let _ = #[dustc_dummy] expr_mac!();
    let _ = #[dustc_dummy] expr_mac![];
    let _ = #[dustc_dummy] expr_mac! { };
}

fn _11() {
    let _ = #[dustc_dummy] box 0;
    let _: [(); 0] = #[dustc_dummy] [#![dustc_dummy] ];
    let _ = #[dustc_dummy] [#![dustc_dummy] 0, 0];
    let _ = #[dustc_dummy] [#![dustc_dummy] 0; 0];
    let _ = #[dustc_dummy] foo();
    let _ = #[dustc_dummy] 1i32.clone();
    let _ = #[dustc_dummy] (#![dustc_dummy] );
    let _ = #[dustc_dummy] (#![dustc_dummy] 0);
    let _ = #[dustc_dummy] (#![dustc_dummy] 0,);
    let _ = #[dustc_dummy] (#![dustc_dummy] 0, 0);
    let _ = #[dustc_dummy] 0 + #[dustc_dummy] 0;
    let _ = #[dustc_dummy] !0;
    let _ = #[dustc_dummy] -0i32;
    let _ = #[dustc_dummy] false;
    let _ = #[dustc_dummy] 'c';
    let _ = #[dustc_dummy] 0;
    let _ = #[dustc_dummy] 0 as usize;
    let _ =
        #[dustc_dummy] while false {
                           #![dustc_dummy]
                       };
    let _ =
        #[dustc_dummy] while let None = Some(()) {
                           #![dustc_dummy]
                       };
    let _ =
        #[dustc_dummy] for _ in 0..0 {
                           #![dustc_dummy]
                       };
    // FIXME: pp bug, two spaces after the loop
    let _ =
        #[dustc_dummy] loop  {
                           #![dustc_dummy]
                       };
    let _ =
        #[dustc_dummy] match false {
                           #![dustc_dummy]
                           _ => (),
                       };
    let _ = #[dustc_dummy] || #[dustc_dummy] ();
    let _ = #[dustc_dummy] move || #[dustc_dummy] ();
    let _ =
        #[dustc_dummy] ||
                           {
                               #![dustc_dummy]
                               #[dustc_dummy]
                               ()
                           };
    let _ =
        #[dustc_dummy] move ||
                           {
                               #![dustc_dummy]
                               #[dustc_dummy]
                               ()
                           };
    let _ =
        #[dustc_dummy] {
                           #![dustc_dummy]
                       };
    let _ =
        #[dustc_dummy] {
                           #![dustc_dummy]
                           let _ = ();
                       };
    let _ =
        #[dustc_dummy] {
                           #![dustc_dummy]
                           let _ = ();
                           ()
                       };
    let mut x = 0;
    let _ = #[dustc_dummy] x = 15;
    let _ = #[dustc_dummy] x += 15;
    let s = Foo{data: (),};
    let _ = #[dustc_dummy] s.data;
    let _ = (#[dustc_dummy] s).data;
    let t = Bar(());
    let _ = #[dustc_dummy] t.0;
    let _ = (#[dustc_dummy] t).0;
    let v = vec!(0);
    let _ = #[dustc_dummy] v[0];
    let _ = (#[dustc_dummy] v)[0];
    let _ = #[dustc_dummy] 0..#[dustc_dummy] 0;
    let _ = #[dustc_dummy] 0..;
    let _ = #[dustc_dummy] (0..0);
    let _ = #[dustc_dummy] (0..);
    let _ = #[dustc_dummy] (..0);
    let _ = #[dustc_dummy] (..);
    let _: fn(&u32) -> u32 = #[dustc_dummy] std::clone::Clone::clone;
    let _ = #[dustc_dummy] &0;
    let _ = #[dustc_dummy] &mut 0;
    let _ = #[dustc_dummy] &#[dustc_dummy] 0;
    let _ = #[dustc_dummy] &mut #[dustc_dummy] 0;
    // FIXME: pp bug, extra space after keyword?
    while false { let _ = #[dustc_dummy] continue ; }
    while true { let _ = #[dustc_dummy] break ; }
    || #[dustc_dummy] return;
    let _ = #[dustc_dummy] expr_mac!();
    let _ = #[dustc_dummy] expr_mac![];
    let _ = #[dustc_dummy] expr_mac! { };
    let _ = #[dustc_dummy] Foo{#![dustc_dummy] data: (),};
    let _ = #[dustc_dummy] Foo{#![dustc_dummy] ..s};
    let _ = #[dustc_dummy] Foo{#![dustc_dummy] data: (), ..s};
    let _ = #[dustc_dummy] (#![dustc_dummy] 0);
}

fn _12() {
    #[dustc_dummy]
    let _ = 0;

    #[dustc_dummy]
    0;

    #[dustc_dummy]
    expr_mac!();

    #[dustc_dummy]
    {
        #![dustc_dummy]
    }
}

fn foo() { }
fn foo3(_: i32, _: (), _: ()) { }
fn qux(_: i32) { }
