// force-host

#![feature(plugin_registrar, dustc_private)]
#![feature(box_syntax)]

extern crate dustc_driver;
extern crate dustc_hir;
#[macro_use]
extern crate dustc_lint;
#[macro_use]
extern crate dustc_session;
extern crate dustc_span;
extern crate dustc_ast;

use dustc_driver::plugin::Registry;
use dustc_lint::{LateContext, LateLintPass, LintArray, LintContext, LintPass};
use dustc_span::symbol::Symbol;
use dustc_ast::attr;

declare_lint! {
    CRATE_NOT_OKAY,
    Warn,
    "crate not marked with #![crate_okay]"
}

declare_lint_pass!(Pass => [CRATE_NOT_OKAY]);

impl<'tcx> LateLintPass<'tcx> for Pass {
    fn check_crate(&mut self, cx: &LateContext, krate: &dustc_hir::Crate) {
        let attrs = cx.tcx.hir().attrs(dustc_hir::CRATE_HIR_ID);
        if !cx.sess().contains_name(attrs, Symbol::intern("crate_okay")) {
            cx.lint(CRATE_NOT_OKAY, |lint| {
                lint.build("crate is not marked with #![crate_okay]")
                    .set_span(krate.item.span)
                    .emit()
            });
        }
    }
}

#[plugin_registrar]
pub fn plugin_registrar(reg: &mut Registry) {
    reg.lint_store.register_lints(&[&CRATE_NOT_OKAY]);
    reg.lint_store.register_late_pass(|| box Pass);
}
