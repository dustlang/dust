// force-host

#![feature(plugin_registrar)]
#![feature(box_syntax, dustc_private)]

extern crate dustc_ast;

// Load dustc as a plugin to get macros
extern crate dustc_driver;
#[macro_use]
extern crate dustc_lint;
#[macro_use]
extern crate dustc_session;

use dustc_driver::plugin::Registry;
use dustc_lint::{EarlyContext, EarlyLintPass, LintArray, LintContext, LintPass};
use dustc_ast as ast;
declare_lint!(TEST_LINT, Warn, "Warn about items named 'lintme'");

declare_lint_pass!(Pass => [TEST_LINT]);

impl EarlyLintPass for Pass {
    fn check_item(&mut self, cx: &EarlyContext, it: &ast::Item) {
        if it.ident.name.as_str() == "lintme" {
            cx.lint(TEST_LINT, |lint| {
                lint.build("item is named 'lintme'").set_span(it.span).emit()
            });
        }
    }
}

#[plugin_registrar]
pub fn plugin_registrar(reg: &mut Registry) {
    reg.lint_store.register_lints(&[&TEST_LINT]);
    reg.lint_store.register_early_pass(|| box Pass);
}
